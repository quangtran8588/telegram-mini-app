import{g as m,d as w,n as f,a as _,i as q,s as P,u as v,b,c as A}from"./index-D_QLbcUc.js";import{n as l,g as D,a as H,v as L}from"./normalizeChainId-BYJPanU-.js";function p(a){const t=q(a);if(!t)throw new Error(`no injected provider found for wallet: "${a}"`);return t}async function M(a,t,o){const s=p(a),i=(await s.request({method:"eth_requestAccounts"}))[0];if(!i)throw new Error("no accounts available");const e=m(i),c=await s.request({method:"eth_chainId"}).then(l);let h=w(c);return t.chain&&t.chain.id!==c&&(await E(s,t.chain),h=t.chain),I(s,e,h,o)}async function W(a,t){const o=p(a),r=(await o.request({method:"eth_accounts"}))[0];if(!r)throw new Error("no accounts available");const i=m(r),e=await o.request({method:"eth_chainId"}).then(l),c=w(e);return I(o,i,c,t)}async function I(a,t,o,s){const r={address:t,async sendTransaction(n){return{transactionHash:await a.request({method:"eth_sendTransaction",params:[{accessList:n.accessList,value:n.value?f(n.value):void 0,gas:n.gas?f(n.gas):void 0,from:this.address,to:n.to,data:n.data}]})}},async signMessage({message:n}){if(!r.address)throw new Error("Provider not setup");const d=typeof n=="string"?P(n):n.raw instanceof Uint8Array?v(n.raw):n.raw;return await a.request({method:"personal_sign",params:[d,r.address]})},async signTypedData(n){if(!a||!r.address)throw new Error("Provider not setup");const{domain:d,message:g,primaryType:C}=n,y={EIP712Domain:H({domain:d}),...n.types};L({domain:d,message:g,primaryType:C,types:y});const T=b({domain:d??{},message:g,primaryType:C,types:y},(j,u)=>A(u)?u.toLowerCase():u);return await a.request({method:"eth_signTypedData_v4",params:[r.address,T]})}};async function i(){a.removeListener("accountsChanged",c),a.removeListener("chainChanged",h),a.removeListener("disconnect",e)}function e(){i(),s.emit("disconnect",void 0)}function c(n){if(n[0]){const d={...r,address:m(n[0])};s.emit("accountChanged",d),s.emit("accountsChanged",n)}else e()}function h(n){const d=w(l(n));s.emit("chainChanged",d)}return a.on&&(a.on("accountsChanged",c),a.on("chainChanged",h),a.on("disconnect",e)),[r,o,i,n=>E(a,n)]}async function E(a,t){var s,r,i;const o=f(t.id);try{await a.request({method:"wallet_switchEthereumChain",params:[{chainId:o}]})}catch(e){if((e==null?void 0:e.code)===4902||((r=(s=e==null?void 0:e.data)==null?void 0:s.originalError)==null?void 0:r.code)===4902){const c=await _(t);await a.request({method:"wallet_addEthereumChain",params:[{chainId:o,chainName:c.name,nativeCurrency:c.nativeCurrency,rpcUrls:D(c),blockExplorerUrls:(i=c.explorers)==null?void 0:i.map(h=>h.url)}]})}else throw e}}export{W as autoConnectInjectedWallet,M as connectInjectedWallet};
